---
- name: Deploy Flask Application
  hosts: flask_servers
  become: yes
  vars:
    app_dir: /home/ubuntu/app
    docker_compose_version: "2.21.0"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name:
          - curl
          - git
          - python3-pip
        state: present

    - name: Install Docker
      shell: |
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
      args:
        creates: /usr/bin/docker

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-{{ ansible_system }}-{{ ansible_machine }}"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Copy application files
      synchronize:
        src: "{{ playbook_dir }}/../"
        dest: "{{ app_dir }}/"
        delete: yes
        recursive: yes
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=.github"
          - "--exclude=terraform"
          - "--exclude=ansible"
          - "--exclude=__pycache__"
          - "--exclude=*.pyc"
          - "--exclude=.pytest_cache"

    - name: Set ownership of application files
      file:
        path: "{{ app_dir }}"
        owner: ubuntu
        group: ubuntu
        recurse: yes

    - name: Stop existing containers
      shell: docker-compose down
      args:
        chdir: "{{ app_dir }}"
      ignore_errors: yes
      become_user: ubuntu

    - name: Build and start containers
      shell: docker-compose up -d --build
      args:
        chdir: "{{ app_dir }}"
      become_user: ubuntu

    - name: Wait for application to be ready
      uri:
        url: "http://localhost:5000/health"
        method: GET
        status_code: 200
      retries: 30
      delay: 10

    - name: Display application status
      debug:
        msg: "Flask application deployed successfully and is running on port 5000"