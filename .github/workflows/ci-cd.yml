name: Flask CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.9'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests
      run: |
        pytest tests/ -v --tb=short

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/flask-cicd:latest
          ${{ secrets.DOCKER_USERNAME }}/flask-cicd:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var="public_key=${{ secrets.EC2_PUBLIC_KEY }}"

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve -var="public_key=${{ secrets.EC2_PUBLIC_KEY }}"

    - name: Get EC2 instance IP
      id: get_ip
      run: |
        cd terraform
        echo "instance_ip=$(terraform output -raw instance_ip)" >> $GITHUB_OUTPUT

    - name: Wait for EC2 instance to be ready
      run: |
        echo "Waiting for EC2 instance to be ready..."
        sleep 60

    - name: Setup SSH key
      run: |
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/flask-cicd-key
        chmod 600 ~/.ssh/flask-cicd-key

    - name: Update Ansible inventory
      run: |
        sed -i "s/YOUR_EC2_PUBLIC_IP/${{ steps.get_ip.outputs.instance_ip }}/g" ansible/inventory.ini

    - name: Install Ansible
      run: |
        pip install ansible

    - name: Deploy with Ansible
      run: |
        cd ansible
        ansible-playbook -i inventory.ini deploy.yml

    - name: Health Check
      run: |
        sleep 30
        curl -f http://${{ steps.get_ip.outputs.instance_ip }}:5000/health || exit 1

    - name: Deployment Success Notification
      run: |
        echo "ðŸš€ Deployment successful!"
        echo "Application is running at: http://${{ steps.get_ip.outputs.instance_ip }}:5000"